// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadITAPI.Models;

#nullable disable

namespace ReadITAPI.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReadITAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("fk_Publisher_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("postalcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("user_Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("fk_Publisher_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ReadITAPI.Models.Book", b =>
                {
                    b.Property<int>("book_ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_ISBN"));

                    b.Property<string>("Book_Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Book_Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("copies")
                        .HasColumnType("int");

                    b.Property<int>("fk_Publisher_id")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("book_ISBN");

                    b.HasIndex("category_id");

                    b.HasIndex("fk_Publisher_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("ReadITAPI.Models.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("ReadITAPI.Models.Order", b =>
                {
                    b.Property<int>("order_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("order_Id"));

                    b.Property<string>("Application_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("fk_book_ISBN")
                        .HasColumnType("int");

                    b.HasKey("order_Id");

                    b.HasIndex("Application_UserId");

                    b.HasIndex("fk_book_ISBN");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("ReadITAPI.Models.Publisher", b =>
                {
                    b.Property<int>("Publisher_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Publisher_Id"));

                    b.Property<string>("Publisher_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Publisher_Id");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("ReadITAPI.Models.Requstion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_Publisher_id")
                        .HasColumnType("int");

                    b.Property<int>("fk_book_ISBN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Publisher_id");

                    b.HasIndex("fk_book_ISBN");

                    b.ToTable("Requstions");
                });

            modelBuilder.Entity("ReadITAPI.Models.Sales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Application_UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_book_ISBN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Application_UserId");

                    b.HasIndex("fk_book_ISBN");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ReadITAPI.Models.ApplicationUser", b =>
                {
                    b.HasOne("ReadITAPI.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("fk_Publisher_id");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ReadITAPI.Models.Book", b =>
                {
                    b.HasOne("ReadITAPI.Models.Category", "category")
                        .WithMany("Books")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadITAPI.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("fk_Publisher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("category");
                });

            modelBuilder.Entity("ReadITAPI.Models.Order", b =>
                {
                    b.HasOne("ReadITAPI.Models.ApplicationUser", "Application_User")
                        .WithMany()
                        .HasForeignKey("Application_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadITAPI.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("fk_book_ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application_User");

                    b.Navigation("book");
                });

            modelBuilder.Entity("ReadITAPI.Models.Requstion", b =>
                {
                    b.HasOne("ReadITAPI.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("fk_Publisher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadITAPI.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("fk_book_ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("book");
                });

            modelBuilder.Entity("ReadITAPI.Models.Sales", b =>
                {
                    b.HasOne("ReadITAPI.Models.ApplicationUser", "Application_User")
                        .WithMany()
                        .HasForeignKey("Application_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadITAPI.Models.Book", "book")
                        .WithMany()
                        .HasForeignKey("fk_book_ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application_User");

                    b.Navigation("book");
                });

            modelBuilder.Entity("ReadITAPI.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
